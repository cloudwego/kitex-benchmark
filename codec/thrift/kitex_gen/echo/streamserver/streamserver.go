// Code generated by Kitex v0.12.3. DO NOT EDIT.

package streamserver

import (
	"context"
	"errors"
	echo "github.com/cloudwego/kitex-benchmark/codec/thrift/kitex_gen/echo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Echo": kitex.NewMethodInfo(
		echoHandler,
		newStreamServerEchoArgs,
		newStreamServerEchoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	streamServerServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return streamServerServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "StreamServer"
	handlerType := (*echo.StreamServer)(nil)
	extra := map[string]interface{}{
		"PackageName": "echo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewBidiStreamingServer[echo.Request, echo.Response](st)
	return handler.(echo.StreamServer).Echo(ctx, stream)
}

func newStreamServerEchoArgs() interface{} {
	return echo.NewStreamServerEchoArgs()
}

func newStreamServerEchoResult() interface{} {
	return echo.NewStreamServerEchoResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) Echo(ctx context.Context) (StreamServer_EchoClient, error) {
	st, err := p.sc.StreamX(ctx, "Echo")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewBidiStreamingClient[echo.Request, echo.Response](st)
	return stream, nil
}

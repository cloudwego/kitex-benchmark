// Code generated by Kitex v0.11.0. DO NOT EDIT.

package streamserver

import (
	"context"

	echo "github.com/cloudwego/kitex-benchmark/codec/thrift/kitex_gen/echo"
	client "github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/streamxclient"
	"github.com/cloudwego/kitex/client/streamxclient/streamxcallopt"
	"github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streamx"
	"github.com/cloudwego/kitex/pkg/streamx/provider/ttstream"
)

type Client interface {
	Echo(ctx context.Context, callOptions ...streamxcallopt.CallOption) (context.Context, streamx.BidiStreamingClient[echo.Request, echo.Response], error)
}

func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	cp, err := ttstream.NewClientProvider(ServiceInfo)
	if err != nil {
		return nil, err
	}
	options = append(options, streamxclient.WithProvider(cp))
	options = append(options, opts...)
	cli, err := client.NewClient(ServiceInfo, options...)
	if err != nil {
		return nil, err
	}
	kc := &kClient{streamer: cli.(client.StreamX), caller: cli.(client.Client)}
	return kc, nil
}

var _ Client = (*kClient)(nil)

type kClient struct {
	caller   client.Client
	streamer client.StreamX
}

func (c *kClient) Echo(ctx context.Context, callOptions ...streamxcallopt.CallOption) (context.Context, streamx.BidiStreamingClient[echo.Request, echo.Response], error) {
	return streamxclient.InvokeStream[echo.Request, echo.Response](
		ctx, c.streamer, serviceinfo.StreamingBidirectional, "Echo", nil, nil, callOptions...)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: echo-grpc.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoClient interface {
	Echo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.Echo/echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
// All implementations must embed UnimplementedEchoServer
// for forward compatibility
type EchoServer interface {
	Echo(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedEchoServer()
}

// UnimplementedEchoServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (UnimplementedEchoServer) Echo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServer) mustEmbedUnimplementedEchoServer() {}

// UnsafeEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServer will
// result in compilation errors.
type UnsafeEchoServer interface {
	mustEmbedUnimplementedEchoServer()
}

func RegisterEchoServer(s grpc.ServiceRegistrar, srv EchoServer) {
	s.RegisterService(&Echo_ServiceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Echo/echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Echo_ServiceDesc is the grpc.ServiceDesc for Echo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Echo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echo",
			Handler:    _Echo_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo-grpc.proto",
}

// SEchoClient is the client API for SEcho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SEchoClient interface {
	Echo(ctx context.Context, opts ...grpc.CallOption) (SEcho_EchoClient, error)
}

type sEchoClient struct {
	cc grpc.ClientConnInterface
}

func NewSEchoClient(cc grpc.ClientConnInterface) SEchoClient {
	return &sEchoClient{cc}
}

func (c *sEchoClient) Echo(ctx context.Context, opts ...grpc.CallOption) (SEcho_EchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &SEcho_ServiceDesc.Streams[0], "/protobuf.SEcho/echo", opts...)
	if err != nil {
		return nil, err
	}
	x := &sEchoEchoClient{stream}
	return x, nil
}

type SEcho_EchoClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type sEchoEchoClient struct {
	grpc.ClientStream
}

func (x *sEchoEchoClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sEchoEchoClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SEchoServer is the server API for SEcho service.
// All implementations must embed UnimplementedSEchoServer
// for forward compatibility
type SEchoServer interface {
	Echo(SEcho_EchoServer) error
	mustEmbedUnimplementedSEchoServer()
}

// UnimplementedSEchoServer must be embedded to have forward compatible implementations.
type UnimplementedSEchoServer struct {
}

func (UnimplementedSEchoServer) Echo(SEcho_EchoServer) error {
	return status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedSEchoServer) mustEmbedUnimplementedSEchoServer() {}

// UnsafeSEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SEchoServer will
// result in compilation errors.
type UnsafeSEchoServer interface {
	mustEmbedUnimplementedSEchoServer()
}

func RegisterSEchoServer(s grpc.ServiceRegistrar, srv SEchoServer) {
	s.RegisterService(&SEcho_ServiceDesc, srv)
}

func _SEcho_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SEchoServer).Echo(&sEchoEchoServer{stream})
}

type SEcho_EchoServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type sEchoEchoServer struct {
	grpc.ServerStream
}

func (x *sEchoEchoServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sEchoEchoServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SEcho_ServiceDesc is the grpc.ServiceDesc for SEcho service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SEcho_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SEcho",
	HandlerType: (*SEchoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "echo",
			Handler:       _SEcho_Echo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo-grpc.proto",
}

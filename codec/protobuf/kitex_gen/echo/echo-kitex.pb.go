// Code generated by Kitex v0.14.1. DO NOT EDIT.

package echo

import (
	"context"

	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/prutal"
)

type Request struct {
	Action string `protobuf:"bytes,1,opt,name=Action" json:"Action,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (x *Request) Reset() { *x = Request{} }

func (x *Request) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Request) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Request) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Request) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Response struct {
	Action string `protobuf:"bytes,1,opt,name=Action" json:"Action,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (x *Response) Reset() { *x = Response{} }

func (x *Response) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Response) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Response) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Echo interface {
	Echo(ctx context.Context, req *Request) (res *Response, err error)
}

type SEcho interface {
	Echo(ctx context.Context, stream SEcho_EchoServer) (err error)
}

type SEcho_EchoServer = streaming.BidiStreamingServer[Request, Response]
